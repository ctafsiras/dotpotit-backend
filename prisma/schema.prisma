datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String
  isVerified        Boolean   @default(false)
  verificationToken String?
  cart              Cart?
  wishlist          Wishlist?
  orders            Order[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  categoryId   String         @unique @db.ObjectId
  category     Category       @relation(fields: [categoryId], references: [id])
  imageUrl     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartItem     CartItem[]
  WishlistItem WishlistItem[]
  OrderItem    OrderItem[]
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @unique @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalAmount   Float
  status        String
  paymentIntent String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
